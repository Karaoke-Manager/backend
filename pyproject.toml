[tool.poetry]
name = "Karman"
version = "0.1.0"
description = "A management software for UltraStar karaoke files."
authors = ["Kim Wittenburg <codello@wittenburg.kim>"]
license = "MIT"

readme = "README.md"
repository = "https://github.com/Karaoke-Manager/backend"
# homepage = "..."
# documentation = "..."

keywords = ["fastapi", "asyncio", "ultrastar", "karaoke"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: AsyncIO"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Karaoke-Manager/backend/issues"


[tool.poe.tasks]
serve = { cmd = "uvicorn karman:app --reload", help = "Runs a development instance" }
test = { cmd = "pytest -n auto --doctest-modules --test-alembic", help = "Run Tests" }
clean = { cmd = "rm -rf .mypy_cache .pytest_cache htmlcov coverage.xml .coverage", help = "Remove build and cache files" }
[tool.poe.tasks.lint]
sequence = [
    "flake8", # Runs black and isort as well
    "mypy"
]
default_item_type = "cmd"
help = "Checks the code style on the entire project."
[tool.poe.tasks.makemigration]
cmd = "alembic revision --autogenerate -m '$message'"
args = [{ name = "message", positional = true, required = true, help = "A short name or message for the migration." }]
help = "Create a migration file based on the current database models."
[tool.poe.tasks.migrate]
cmd = "alembic upgrade '$revision'"
args = [{ name = "revision", positional = true, default = "head", help = "The revision to which you want to upgrade." }]
help = "Applies migrations to the database."
[tool.poe.tasks.rollback]
cmd = "alembic downgrade '$revision'"
args = [{ name = "revision", positional = true, default = "-1", help = "The revision to which you want to rollback. By default the last revision is rolled back." }]
help = "Rolls back one or more migrations."

[tool.black]
line-length = 88

[tool.isort]
profile = "black"

[tool.mypy]
files = ["karman", "tests"]
# TODO: Enable when https://github.com/samuelcolvin/pydantic/pull/3175 is merged
# plugins = ["pydantic.mypy"]
plugins = ["sqlmypy"]
# Untyped definitions and calls
disallow_untyped_defs = true
# None and Optional handling
no_implicit_optional = true
# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
# Miscellaneous
warn_unused_configs = true

[tool.pydantic-mypy]
warn_untyped_fields = true

[tool.pytest.ini_options]
testpaths = ["tests", "karman"]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.70.1"
fastapi-pagination = "^0.9.1"
python-multipart = "^0.0.5"
python-dotenv = "^0.19.2"
orjson = "^3.6.5"

# ORM and Database Drivers
ormar = "^0.10.23"
alembic = "^1.7.5"
asyncpg = { version = "^0.25.0", optional = true }
psycopg2-binary = { version = "^2.9.2", optional = true }
aiomysql = { version = "^0.0.22", optional = true }
mysqlclient = { version = "^2.1.0", optional = true }
aiosqlite = { version = "^0.17.0", optional = true }

# Uvicorn Optional Dependency
uvicorn = { version = "^0.16.0", optional = true, extras = ["standard"] }

# Pytest Optional Dependency
pytest = { version = "^6.2.5", optional = true }
pytest-cov = { version = "^3.0.0", optional = true }
pytest-xdist = { version = "^2.5.0", optional = true }
pytest-alembic = { version = "^0.7.0", optional = true }


[tool.poetry.dev-dependencies]
poethepoet = "^0.11.0"
uvicorn = { version = "^0.16.0", extras = ["standard"] }
black = "^21.12b0"
isort = "^5.10.1"
flake8 = "^4.0.1"
flake8-black = "^0.2.3"
flake8-isort = "^4.1.1"

mypy = "^0.930"
sqlalchemy-stubs = "^0.4"

[tool.poetry.extras]
uvicorn = ["uvicorn"]
postgresql = ["asyncpg", "psycopg2-binary"]
postgres = ["asyncpg", "psycopg2-binary"]
mysql = ["aiomysql", "mysqlclient"]
sqlite = ["aiosqlite"]
tests = ["pytest", "pytest-cov", "pytest-xdist", "pytest-alembic"]

[tool.poetry.build]
generate-setup-file = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
